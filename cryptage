#Cryptage 

texte = input()  #utilisateur doit rentrer le texte qu'il souhaite coder
nbtexte = len(texte) # fonction qui permet de retourner la longueur de la chaine de caracteres

alphabet = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U",

            "V", "W", "X", "Y", "Z", " ", ".", ",", ":", "!", "?", ";", "#", "(", ")", "'", "\\", "\"", "-", "1", "2", "3",

            "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",

            "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"] # notre alphabet specifique

n = 0 # variable-curseur qui selon son reste par la division euclidienne permet de definir la place caractere a coder dans texte
cle = "CODE"  # utile pour le programme de Vigenere
nbcle = len(cle) # retourner la longueur de la chaine de caracteres qui compose la cle
quotient = 2 // nbcle #utile sur Vigenere
reste = 2 % nbcle #utile sur Vigenere



def asci_diminu() :  #fonction qui transforme deux caracteres cote a cote en deux lettres contenues dans le tableau ASCII

    for loop in range(2) : #boucle qui tourne deux fois pour coder les deux caracteres cote a cote

            newCaractere = chr(ord(lettres[loop]) + 1) 
            # ord = fonction qui transforme la lettre associee au caractere a son chiffre complementaire dans ASCII
            # chr = fonction qui transforme chaque caractere en associant le chiffre du tableau ASCII en sa lettre associee
	    # +1 = avancer de 1 rang pour sortir un nouveau caractere

            print(newCaractere, end="") # sortir les 2 nouveaux caracteres codes sur une meme ligne


def asci_lettres() :  # meme fonction 

    for loop in range(2):

        newCaractere = chr(ord(lettres[loop]) + 8) 
	# +8 = avancer de 8 rangs pour sortir un nouveau caractere

        print(newCaractere, end="") # sortir les 2 nouveaux caracteres codes sur une meme ligne



def notre_alphabet() : # fontion qui se refere au tableau que nous avons cree, qui prend en compte les caracteres speciaux

    for loop in range(2):

        for eachPos in range(50): # boucle qui tourne entierement dans notre tableau unique de 50 caracteres

            if lettres[loop].upper() == alphabet[eachPos]:
             # condition
             # si le caractere dans le texte qui est sous forme majuscule 
	     # est identique a un des 50 caracteres repertories dans notre tableau

                print(alphabet[eachPos + 5], end="")  # afficher 2 nouveaux caracteres de 5 rangs superieur



def vige_nere() :  # fontion qui se refere au tableau que nous avons cree, qui prend en compte les caracteres speciaux

    for loopi in range(reste):

        for eatchpos in range(50): #chercher la lettre de la cle dans notre alphabet specifique

            if cle[loopi] == alphabet[eatchpos]: 
	    # attribuer la lettre de la cle demander a son postionnement dans le tableau de notre alphabet

                nvlcle = eatchpos 

                for eachPos in range(50): #chercher la lettre à crypter dans notre alphabet specifique

                    if lettres[loopi + nbcle * quotient].upper() == alphabet[eachPos]: 
		    # faire la position de la lettre a crypter + le nombre de lettre de la cle * quotient 
		    # pour être sur que ce caractère existe dans notre alphabet specifique 

                        print(alphabet[eachPos + nvlcle], end="") #afficher les 2 nouveaux caractères



def texte_impaire() : # puisque chaque programme code pour 2 caracteres cote a cote, si le texte est impair alors 
	              # le dernier caractere va etre code selon une fonction specifique

    dernierelettre = chr(ord(texte[nbtexte - 1]) + 6) 
    # selon le tableau ASCII, convertir en chiffre puis en lettre 
    # puis avancer de 6 rangs

    print(dernierelettre, end="") # afficher le dernier caractere code 

# Voici le programme principal de codage qui appelle les 5 methodes :

while n < (nbtexte - 1): # boucle tant que conditonnelle
	                 # tant que la variable curseur est inferieure a la longueur du texte a coder - 1 (car 0 equivaut a 1)

    lettres = texte[n:n + 2] # chaque methode de cryptage code 2 caracteres cote a cote dans le texte



    if n % 8 == 0 or n % 8 == 1: # si le reste de la variable n divise par 8 (nombre de methodes de codage) vaut 0 ou 1

        asci_diminu() # alors on appelle la methode 1 (pour les 2 premiers caracteres)



    elif n % 8 == 2 or n % 8 == 3: # si le reste de la variable n divise par 8 vaut 2 ou 3

        asci_lettres() # on appelle la methode 2 (pour les 2 caracteres suivants)



    elif n % 8 == 4 or n % 8 == 5: #si le reste de la variable n divise par 8 vaut 4 ou 5

        notre_alphabet() # on appelle la methode 3 (pour les 2 caracteres suivants)



    elif n % 8 == 6 or n % 8 == 7: #si le reste de la variable n divise par 8 vaut 6 ou 7

        vige_nere() # on appelle la methode 4 (pour les 2 caracteres suivants)



    n = n + 2
    # n prend des nouvelles valeurs de 2 en 2 pour appeler differentes methodes de cryptage (ce qui change le reste)


if nbtexte % 2 == 1: # si le texte est impair car le reste vaut 1

    texte_impaire()  # appeler pour le tout dernier caractere du texte la derniere methode de cryptage 
